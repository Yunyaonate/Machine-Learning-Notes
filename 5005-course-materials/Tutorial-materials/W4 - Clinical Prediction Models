{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["aTqO7iZTrc9u"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Linear Regression\n","\n"],"metadata":{"id":"WE31MCP8FDjz"}},{"cell_type":"markdown","source":["First, letâ€™s get the imports out of the way and generate some data that we will be working with."],"metadata":{"id":"KVaIECFEFnrw"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"3WgrHq13zr2R","executionInfo":{"status":"ok","timestamp":1692260980329,"user_tz":-600,"elapsed":3037,"user":{"displayName":"Dylan","userId":"11860375853639011437"}}},"outputs":[],"source":["import sklearn\n","# Generic\n","import pandas as pd\n","import numpy as np\n","\n","# Generate data sets\n","from sklearn.datasets import make_blobs\n","from sklearn.preprocessing import StandardScaler\n","\n","# Prediction models and metrics\n","from sklearn import model_selection\n","from sklearn import metrics\n","from sklearn import datasets\n","\n","# Data Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px"]},{"cell_type":"markdown","source":["Load the data as before."],"metadata":{"id":"H3vc6fzKNg5j"}},{"cell_type":"code","source":["!pip install -U -q PyDrive\n","import os\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","# Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","if not os.path.exists('/content/BMI.csv'):\n","    link = '194YVnhs0jINoRuuCAKHxK2-KkTPuPRxi'  # Restricted shared link\n","    downloaded = drive.CreateFile({'id':link})\n","    downloaded.GetContentFile('BMI.csv')\n","\n","df = pd.read_csv('/content/BMI.csv')\n","\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"loccBwcSNjF9","executionInfo":{"status":"ok","timestamp":1692260992241,"user_tz":-600,"elapsed":11399,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"e7194a58-2570-49e6-e8fb-f3c81983fc6e"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   UnderwaterDensity  BodyFatSiriEqu  Age   Height  Weight(kg)  NeckCircumf  \\\n","0             1.0708            12.3   23  172.085    69.96662         36.2   \n","1             1.0853             6.1   22  183.515    78.58488         38.5   \n","2             1.0414            25.3   22  168.275    69.85322         34.0   \n","3             1.0751            10.4   26  183.515    83.80119         37.4   \n","4             1.0340            28.7   24  180.975    83.57439         34.4   \n","\n","   ChestCircumf  Abdomen2Circumf  HipCircumf  ThighCircumf  KneeCircumf  \\\n","0          93.1             85.2        94.5          59.0         37.3   \n","1          93.6             83.0        98.7          58.7         37.3   \n","2          95.8             87.9        99.2          59.6         38.9   \n","3         101.8             86.4       101.2          60.1         37.3   \n","4          97.3            100.0       101.9          63.2         42.2   \n","\n","   AnkleCircumf  ExtendBicepsCircumf  ForearmCircumf  WristCircumf  \n","0          21.9                 32.0            27.4          17.1  \n","1          23.4                 30.5            28.9          18.2  \n","2          24.0                 28.8            25.2          16.6  \n","3          22.8                 32.4            29.4          18.2  \n","4          24.0                 32.2            27.7          17.7  "],"text/html":["\n","\n","  <div id=\"df-5ad20b2c-7bff-4647-b937-dcbd40c5c502\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>UnderwaterDensity</th>\n","      <th>BodyFatSiriEqu</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight(kg)</th>\n","      <th>NeckCircumf</th>\n","      <th>ChestCircumf</th>\n","      <th>Abdomen2Circumf</th>\n","      <th>HipCircumf</th>\n","      <th>ThighCircumf</th>\n","      <th>KneeCircumf</th>\n","      <th>AnkleCircumf</th>\n","      <th>ExtendBicepsCircumf</th>\n","      <th>ForearmCircumf</th>\n","      <th>WristCircumf</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0708</td>\n","      <td>12.3</td>\n","      <td>23</td>\n","      <td>172.085</td>\n","      <td>69.96662</td>\n","      <td>36.2</td>\n","      <td>93.1</td>\n","      <td>85.2</td>\n","      <td>94.5</td>\n","      <td>59.0</td>\n","      <td>37.3</td>\n","      <td>21.9</td>\n","      <td>32.0</td>\n","      <td>27.4</td>\n","      <td>17.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0853</td>\n","      <td>6.1</td>\n","      <td>22</td>\n","      <td>183.515</td>\n","      <td>78.58488</td>\n","      <td>38.5</td>\n","      <td>93.6</td>\n","      <td>83.0</td>\n","      <td>98.7</td>\n","      <td>58.7</td>\n","      <td>37.3</td>\n","      <td>23.4</td>\n","      <td>30.5</td>\n","      <td>28.9</td>\n","      <td>18.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0414</td>\n","      <td>25.3</td>\n","      <td>22</td>\n","      <td>168.275</td>\n","      <td>69.85322</td>\n","      <td>34.0</td>\n","      <td>95.8</td>\n","      <td>87.9</td>\n","      <td>99.2</td>\n","      <td>59.6</td>\n","      <td>38.9</td>\n","      <td>24.0</td>\n","      <td>28.8</td>\n","      <td>25.2</td>\n","      <td>16.6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0751</td>\n","      <td>10.4</td>\n","      <td>26</td>\n","      <td>183.515</td>\n","      <td>83.80119</td>\n","      <td>37.4</td>\n","      <td>101.8</td>\n","      <td>86.4</td>\n","      <td>101.2</td>\n","      <td>60.1</td>\n","      <td>37.3</td>\n","      <td>22.8</td>\n","      <td>32.4</td>\n","      <td>29.4</td>\n","      <td>18.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0340</td>\n","      <td>28.7</td>\n","      <td>24</td>\n","      <td>180.975</td>\n","      <td>83.57439</td>\n","      <td>34.4</td>\n","      <td>97.3</td>\n","      <td>100.0</td>\n","      <td>101.9</td>\n","      <td>63.2</td>\n","      <td>42.2</td>\n","      <td>24.0</td>\n","      <td>32.2</td>\n","      <td>27.7</td>\n","      <td>17.7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ad20b2c-7bff-4647-b937-dcbd40c5c502')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-d4a67927-b01d-485c-88ce-e7066bfb165d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4a67927-b01d-485c-88ce-e7066bfb165d')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-d4a67927-b01d-485c-88ce-e7066bfb165d button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5ad20b2c-7bff-4647-b937-dcbd40c5c502 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5ad20b2c-7bff-4647-b937-dcbd40c5c502');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["Get the number of row and columnm as well as the column name of the data."],"metadata":{"id":"2qTduhvDcUP5"}},{"cell_type":"code","source":["print(f'rows: {df.shape[0]}, columns: {df.shape[1]}')\n","print(df.columns.values.tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GjQD4cbRcfbp","executionInfo":{"status":"ok","timestamp":1692260995175,"user_tz":-600,"elapsed":518,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"e696db79-e6ee-4eb8-d2c8-e07863ac5eed"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["rows: 252, columns: 15\n","['UnderwaterDensity', 'BodyFatSiriEqu', 'Age', 'Height', 'Weight(kg)', 'NeckCircumf', 'ChestCircumf', 'Abdomen2Circumf', 'HipCircumf', 'ThighCircumf', 'KneeCircumf', 'AnkleCircumf', 'ExtendBicepsCircumf', 'ForearmCircumf', 'WristCircumf']\n"]}]},{"cell_type":"markdown","source":["To ensure randomisation weâ€™ll create a random permutation of the number 0 to 252."],"metadata":{"id":"rRtIcxA6PvZU"}},{"cell_type":"code","source":["# For reproducability of the results\n","np.random.seed(42)\n","rndperm = np.random.permutation(df.shape[0])"],"metadata":{"id":"wS-neHFm5Mes","executionInfo":{"status":"ok","timestamp":1692260995620,"user_tz":-600,"elapsed":4,"user":{"displayName":"Dylan","userId":"11860375853639011437"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["Here, we want to explore the relationship between height and weight (using linera regression).\n","\n","First, we need to adjust the needed data"],"metadata":{"id":"CHqw2URrcycZ"}},{"cell_type":"code","source":["X = df[['Height']]\n","y = df[['Weight(kg)']]\n","\n","# Seperate the data into the train set and the test set.\n","X_train,X_test,y_train,y_test= model_selection.train_test_split(X, y, test_size=0.1,random_state=42)"],"metadata":{"id":"1NBTjHpPdxn5","executionInfo":{"status":"ok","timestamp":1692260997031,"user_tz":-600,"elapsed":1,"user":{"displayName":"Dylan","userId":"11860375853639011437"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Call the linear regression model and train it (solve $w_0$ and $w_1$)."],"metadata":{"id":"2wPsUmRkfgkC"}},{"cell_type":"code","source":["# Call the linear regression model\n","from sklearn import linear_model\n","line_reg = linear_model.LinearRegression()\n","\n","# Train\n","line_reg.fit(X_train, y_train)\n","\n","# get parameters\n","w_0 = line_reg.intercept_\n","w_1 = line_reg.coef_\n","print(f'w_0: {w_0}, w_1: {w_1}.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_zQGcr8mdLkQ","executionInfo":{"status":"ok","timestamp":1692260997489,"user_tz":-600,"elapsed":1,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"b9bf1089-9ff3-4a13-fcea-e9e9e0b0c832"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["w_0: [7.89612647], w_1: [[0.41119549]].\n"]}]},{"cell_type":"markdown","source":["Get the fit error."],"metadata":{"id":"-X5RHovEjCZZ"}},{"cell_type":"code","source":["y_predict_in_train= line_reg.predict(X_train)\n","y_predict_in_test = line_reg.predict(X_test)\n","\n","\n","error_in_train  = metrics.mean_squared_error(y_predict_in_train, y_train)\n","error_in_test   = metrics.mean_squared_error(y_predict_in_test, y_test)\n","\n","\n","print(\"Error in train:{}\".format(error_in_train))\n","print(\"Error in test:{}\".format(error_in_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p8ajc47CjIqo","executionInfo":{"status":"ok","timestamp":1692260997920,"user_tz":-600,"elapsed":2,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"60ba3156-6ccc-423d-e282-979563f19947"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Error in train:168.54498628490126\n","Error in test:88.25561906418989\n"]}]},{"cell_type":"markdown","source":["Plot the fit figure."],"metadata":{"id":"ChWm9m_gjaWJ"}},{"cell_type":"code","source":["plt.figure(figsize=[10,10])\n","\n","# plot the train data and the linear regression model.\n","plt.subplot(211)\n","plt.axis([160,200,20,140]) # set the ranges of x-axis and y-axis.\n","plt.scatter(X_train, y_train)\n","plt.plot(X_train, y_predict_in_train)\n","\n","plt.title(\"Train\")\n","plt.xlabel(\"Height\")\n","plt.ylabel(\"Weight(kg)\")\n","\n","# plot the test\n","plt.subplot(212)\n","plt.axis([160,200,20,140])\n","plt.scatter(X_test, y_test)\n","plt.plot(X_test, y_predict_in_test)\n","\n","plt.title(\"Test\")\n","plt.xlabel(\"Height\")\n","plt.ylabel(\"Weight(kg)\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":872},"id":"-KQbfz4NjfvB","executionInfo":{"status":"ok","timestamp":1692260999265,"user_tz":-600,"elapsed":881,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"ac76a284-1443-4b15-9676-e6d58cd17c9e"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["\n","\n","**Question 1: How can we use linear regression to fit the relationship of 'weigh' v.s. ('NeckCircumf', 'ChestCircumf', 'Abdomen2Circumf', 'HipCircumf')?**\n","\n","**Question 2: How can we use logistic regression to fit the relationship of 'weight' v.s. 'height'?**"],"metadata":{"id":"eYI2EJ-fncPy"}},{"cell_type":"markdown","source":["## $k$-NN"],"metadata":{"id":"O0-lLIxq2Tja"}},{"cell_type":"markdown","source":["For the example of $k$-NN, we will the [Breast Cancer Wisconsin (Diagnostic) Data Set](https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data?resource=download) to predict whether the breast cancer is benign or malignant."],"metadata":{"id":"3Rmx9UGl2Zai"}},{"cell_type":"markdown","source":["First, load the data."],"metadata":{"id":"cAbbosYi3UUi"}},{"cell_type":"code","source":["!pip install -U -q PyDrive\n","import os\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","# Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","if not os.path.exists('/content/breast_cancer.csv'):\n","    link = '1E1NPFCIPQG7OVMrPlacDK5VG2KLZ-Otz'  # Restricted shared link\n","    downloaded = drive.CreateFile({'id':link})\n","    downloaded.GetContentFile('breast_cancer.csv')\n","\n","df = pd.read_csv('/content/breast_cancer.csv')\n","\n","\n","del df['id'] # delete the meaningless id column.\n","del df['Unnamed: 32'] # delete the meaningless Unnamed: 32 column.\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"sk8a0EbG3hQC","executionInfo":{"status":"ok","timestamp":1692261012609,"user_tz":-600,"elapsed":13346,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"fa555ff0-2eb1-4315-9a35-3bded8f65d0b"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n","0         M        17.99         10.38          122.80     1001.0   \n","1         M        20.57         17.77          132.90     1326.0   \n","2         M        19.69         21.25          130.00     1203.0   \n","3         M        11.42         20.38           77.58      386.1   \n","4         M        20.29         14.34          135.10     1297.0   \n","\n","   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n","0          0.11840           0.27760          0.3001              0.14710   \n","1          0.08474           0.07864          0.0869              0.07017   \n","2          0.10960           0.15990          0.1974              0.12790   \n","3          0.14250           0.28390          0.2414              0.10520   \n","4          0.10030           0.13280          0.1980              0.10430   \n","\n","   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n","0         0.2419  ...         25.38          17.33           184.60   \n","1         0.1812  ...         24.99          23.41           158.80   \n","2         0.2069  ...         23.57          25.53           152.50   \n","3         0.2597  ...         14.91          26.50            98.87   \n","4         0.1809  ...         22.54          16.67           152.20   \n","\n","   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n","0      2019.0            0.1622             0.6656           0.7119   \n","1      1956.0            0.1238             0.1866           0.2416   \n","2      1709.0            0.1444             0.4245           0.4504   \n","3       567.7            0.2098             0.8663           0.6869   \n","4      1575.0            0.1374             0.2050           0.4000   \n","\n","   concave points_worst  symmetry_worst  fractal_dimension_worst  \n","0                0.2654          0.4601                  0.11890  \n","1                0.1860          0.2750                  0.08902  \n","2                0.2430          0.3613                  0.08758  \n","3                0.2575          0.6638                  0.17300  \n","4                0.1625          0.2364                  0.07678  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","\n","  <div id=\"df-8cfbaab2-d099-4b77-ba98-84a388b00c91\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>concave points_mean</th>\n","      <th>symmetry_mean</th>\n","      <th>...</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>concave points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>fractal_dimension_worst</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M</td>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>...</td>\n","      <td>25.38</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M</td>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>...</td>\n","      <td>24.99</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M</td>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.1974</td>\n","      <td>0.12790</td>\n","      <td>0.2069</td>\n","      <td>...</td>\n","      <td>23.57</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.1444</td>\n","      <td>0.4245</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M</td>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.2414</td>\n","      <td>0.10520</td>\n","      <td>0.2597</td>\n","      <td>...</td>\n","      <td>14.91</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.2098</td>\n","      <td>0.8663</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M</td>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.1980</td>\n","      <td>0.10430</td>\n","      <td>0.1809</td>\n","      <td>...</td>\n","      <td>22.54</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.1374</td>\n","      <td>0.2050</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 31 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cfbaab2-d099-4b77-ba98-84a388b00c91')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-936fa91c-1a73-4572-b6a7-649b33081490\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-936fa91c-1a73-4572-b6a7-649b33081490')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-936fa91c-1a73-4572-b6a7-649b33081490 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8cfbaab2-d099-4b77-ba98-84a388b00c91 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8cfbaab2-d099-4b77-ba98-84a388b00c91');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["Get the number of row and columnm as well as the column name of the data."],"metadata":{"id":"aSxNSVYX9dB7"}},{"cell_type":"code","source":["print(f'rows: {df.shape[0]}, columns: {df.shape[1]}')\n","print(df.columns.values.tolist())"],"metadata":{"id":"onQA9llI9dPC","executionInfo":{"status":"ok","timestamp":1692261012610,"user_tz":-600,"elapsed":16,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"03680cc7-b864-4cf9-ef3b-2a04df3f7d36"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["rows: 569, columns: 31\n","['diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst']\n"]}]},{"cell_type":"markdown","source":["For reproducability of the results"],"metadata":{"id":"B2eGoOhZBbrr"}},{"cell_type":"code","source":["np.random.seed(10)\n","rndperm = np.random.permutation(df.shape[0])"],"metadata":{"id":"CL2zRp2kBcBC","executionInfo":{"status":"ok","timestamp":1692261012610,"user_tz":-600,"elapsed":7,"user":{"displayName":"Dylan","userId":"11860375853639011437"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["Separate the data into features and labels."],"metadata":{"id":"JRdMy_VQ-BrL"}},{"cell_type":"code","source":["X  = df.iloc[:, df.columns != \"diagnosis\"]\n","y = df['diagnosis']\n","\n","\n","from sklearn.model_selection import train_test_split\n","# spilt train set and test set\n","X_train, X_test , y_train, y_test = train_test_split(X, y, test_size = 0.1)"],"metadata":{"id":"bvnlOE0A-LSr","executionInfo":{"status":"ok","timestamp":1692261012610,"user_tz":-600,"elapsed":6,"user":{"displayName":"Dylan","userId":"11860375853639011437"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"GD2DX5BmRGo-","executionInfo":{"status":"ok","timestamp":1692261013120,"user_tz":-600,"elapsed":516,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"dfb298ce-9bb1-4395-9a95-b0e8cb61db71"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n","0        17.99         10.38          122.80     1001.0          0.11840   \n","1        20.57         17.77          132.90     1326.0          0.08474   \n","2        19.69         21.25          130.00     1203.0          0.10960   \n","3        11.42         20.38           77.58      386.1          0.14250   \n","4        20.29         14.34          135.10     1297.0          0.10030   \n","\n","   compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n","0           0.27760          0.3001              0.14710         0.2419   \n","1           0.07864          0.0869              0.07017         0.1812   \n","2           0.15990          0.1974              0.12790         0.2069   \n","3           0.28390          0.2414              0.10520         0.2597   \n","4           0.13280          0.1980              0.10430         0.1809   \n","\n","   fractal_dimension_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n","0                 0.07871  ...         25.38          17.33           184.60   \n","1                 0.05667  ...         24.99          23.41           158.80   \n","2                 0.05999  ...         23.57          25.53           152.50   \n","3                 0.09744  ...         14.91          26.50            98.87   \n","4                 0.05883  ...         22.54          16.67           152.20   \n","\n","   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n","0      2019.0            0.1622             0.6656           0.7119   \n","1      1956.0            0.1238             0.1866           0.2416   \n","2      1709.0            0.1444             0.4245           0.4504   \n","3       567.7            0.2098             0.8663           0.6869   \n","4      1575.0            0.1374             0.2050           0.4000   \n","\n","   concave points_worst  symmetry_worst  fractal_dimension_worst  \n","0                0.2654          0.4601                  0.11890  \n","1                0.1860          0.2750                  0.08902  \n","2                0.2430          0.3613                  0.08758  \n","3                0.2575          0.6638                  0.17300  \n","4                0.1625          0.2364                  0.07678  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","\n","  <div id=\"df-7d152e7a-be3c-4314-aaa4-d7f44b0fb122\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>concave points_mean</th>\n","      <th>symmetry_mean</th>\n","      <th>fractal_dimension_mean</th>\n","      <th>...</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>concave points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>fractal_dimension_worst</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>0.07871</td>\n","      <td>...</td>\n","      <td>25.38</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>0.05667</td>\n","      <td>...</td>\n","      <td>24.99</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.1974</td>\n","      <td>0.12790</td>\n","      <td>0.2069</td>\n","      <td>0.05999</td>\n","      <td>...</td>\n","      <td>23.57</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.1444</td>\n","      <td>0.4245</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.2414</td>\n","      <td>0.10520</td>\n","      <td>0.2597</td>\n","      <td>0.09744</td>\n","      <td>...</td>\n","      <td>14.91</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.2098</td>\n","      <td>0.8663</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.1980</td>\n","      <td>0.10430</td>\n","      <td>0.1809</td>\n","      <td>0.05883</td>\n","      <td>...</td>\n","      <td>22.54</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.1374</td>\n","      <td>0.2050</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 30 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d152e7a-be3c-4314-aaa4-d7f44b0fb122')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-e87e4682-7708-472d-8dbf-71b67d9f357b\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e87e4682-7708-472d-8dbf-71b67d9f357b')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-e87e4682-7708-472d-8dbf-71b67d9f357b button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7d152e7a-be3c-4314-aaa4-d7f44b0fb122 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7d152e7a-be3c-4314-aaa4-d7f44b0fb122');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["y.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F0TMUJ6PRMzO","executionInfo":{"status":"ok","timestamp":1692261013121,"user_tz":-600,"elapsed":17,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"outputId":"f7098fad-6d3a-4f17-e016-992198ff3e76"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    M\n","1    M\n","2    M\n","3    M\n","4    M\n","Name: diagnosis, dtype: object"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["Import the package of $k$-NN algorithm and instantiate it."],"metadata":{"id":"y7bn-iIA_lLb"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","# instantiate with $k=5$\n","knn_classifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski')\n","\n","# train\n","knn_classifier.fit(X_train, y_train)\n","\n","y_train_pred = knn_classifier.predict(X_train)\n","y_test_pred = knn_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","from sklearn.metrics import accuracy_score\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred):.4f}\")"],"metadata":{"id":"5hHNKNiz_z8E","executionInfo":{"status":"ok","timestamp":1692261013121,"user_tz":-600,"elapsed":10,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"816cadab-2fd4-47a1-d912-2bc8acb86469"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9453\n","acc of test dataï¼š0.9298\n"]}]},{"cell_type":"markdown","source":["Use $t$-SNE visualize the classification results in 2D."],"metadata":{"id":"DDVAZHjRFV5U"}},{"cell_type":"code","source":["import numpy as np\n","from sklearn.manifold import TSNE\n","tsne = TSNE(n_components=2, init='pca',learning_rate='auto', random_state=0)\n","\n","X_train_2D = tsne.fit_transform(X_train)\n","X_test_2D = tsne.fit_transform(X_test)\n","# plt.scatter(X_train_2D,y_train)\n","\n","# x_min, x_max = np.min(X_train_2D, 0), np.max(X_train_2D, 0)\n","# X_train_2D = (X_train_2D - x_min) / (x_max - x_min)\n","\n","colors = {'M':'r', 'B':'b'}\n","markers = {'M':'x', 'B':'o'}\n","# for i in range(X_train_2D.shape[0]):\n","\n","fig = plt.figure()\n","\n","# Train (ground ture)\n","ax1 = fig.add_subplot(221)\n","for i in range(X_train_2D.shape[0]):\n","    ax1.scatter(X_train_2D[i, 0], X_train_2D[i, 1],\n","                c=colors[np.array(y_train)[i]],marker=markers[np.array(y_train)[i]])\n","plt.title('Train (ground ture)',fontsize=10)\n","plt.xticks([])\n","plt.yticks([])\n","\n","# Train (predict)\n","ax2 = fig.add_subplot(222)\n","for i in range(X_train_2D.shape[0]):\n","    ax2.scatter(X_train_2D[i, 0], X_train_2D[i, 1],\n","                c=colors[np.array(y_train_pred)[i]],marker=markers[np.array(y_train_pred)[i]])\n","plt.title('Train (predict)',fontsize=10)\n","plt.xticks([])\n","plt.yticks([])\n","\n","# Test (ground ture)\n","ax3 = fig.add_subplot(223)\n","for i in range(X_test_2D.shape[0]):\n","    ax3.scatter(X_test_2D[i, 0], X_test_2D[i, 1],\n","                c=colors[np.array(y_test)[i]],marker=markers[np.array(y_test)[i]])\n","plt.title('Test (ground ture)',fontsize=10)\n","plt.xticks([])\n","plt.yticks([])\n","\n","# Test (predict)\n","ax4 = fig.add_subplot(224)\n","for i in range(X_test_2D.shape[0]):\n","    ax4.scatter(X_test_2D[i, 0], X_test_2D[i, 1],\n","                c=colors[np.array(y_test_pred)[i]],marker=markers[np.array(y_test_pred)[i]])\n","plt.title('Test (predict)',fontsize=10)\n","plt.xticks([])\n","plt.yticks([])\n","\n","plt.show()\n","print('Blue points are benign, red points are malignant.')"],"metadata":{"id":"mPW--ueHEvPN","executionInfo":{"status":"ok","timestamp":1692261047277,"user_tz":-600,"elapsed":34160,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/","height":442},"outputId":"de2e8d15-4333-405f-805c-0ca40ec29004"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Blue points are benign, red points are malignant.\n"]}]},{"cell_type":"markdown","source":["Use  t -SNE visualize the classification results in 3D."],"metadata":{"id":"GypRpzoTh07W"}},{"cell_type":"code","source":["tsne = TSNE(n_components=3, init='pca',learning_rate='auto', random_state=0)\n","\n","X_train_3D = tsne.fit_transform(X_train)\n","X_test_3D = tsne.fit_transform(X_test)\n","# plt.scatter(X_train_2D,y_train)\n","\n","# x_min, x_max = np.min(X_train_2D, 0), np.max(X_train_2D, 0)\n","# X_train_2D = (X_train_2D - x_min) / (x_max - x_min)\n","\n","colors = {'M':'r', 'B':'b'}\n","markers = {'M':'x', 'B':'o'}\n","# for i in range(X_train_2D.shape[0]):\n","\n","fig = plt.figure()\n","\n","\n","# Train (ground ture)\n","ax1 = fig.add_subplot(2, 2, 1, projection=\"3d\")\n","for i in range(X_train_3D.shape[0]):\n","    ax1.scatter3D(X_train_3D[i, 0], X_train_3D[i, 1], X_train_3D[i, 2],\n","                c=colors[np.array(y_train)[i]],marker=markers[np.array(y_train)[i]])\n","plt.title('Train (ground ture)',fontsize=8)\n","plt.xticks([])\n","plt.yticks([])\n","\n","# Train (predict)\n","ax2 = fig.add_subplot(2, 2, 2, projection=\"3d\")\n","for i in range(X_train_3D.shape[0]):\n","    ax2.scatter3D(X_train_3D[i, 0], X_train_3D[i, 1], X_train_3D[i, 2],\n","                c=colors[np.array(y_train_pred)[i]],marker=markers[np.array(y_train_pred)[i]])\n","plt.title('Train (predict)',fontsize=8)\n","plt.xticks([])\n","plt.yticks([])\n","\n","# Test (ground ture)\n","ax3 = fig.add_subplot(2, 2, 3, projection=\"3d\")\n","for i in range(X_test_3D.shape[0]):\n","    ax3.scatter3D(X_test_3D[i, 0], X_test_3D[i, 1], X_test_3D[i, 2],\n","                c=colors[np.array(y_test)[i]],marker=markers[np.array(y_test)[i]])\n","plt.title('Test (ground ture)',fontsize=8)\n","plt.xticks([])\n","plt.yticks([])\n","\n","# Test (predict)\n","ax4 = fig.add_subplot(2, 2, 4, projection=\"3d\")\n","for i in range(X_test_2D.shape[0]):\n","    ax4.scatter3D(X_test_3D[i, 0], X_test_3D[i, 1], X_test_3D[i, 2],\n","                c=colors[np.array(y_test_pred)[i]],marker=markers[np.array(y_test_pred)[i]])\n","plt.title('Test (predict)',fontsize=8)\n","plt.xticks([])\n","plt.yticks([])\n","\n","plt.show()\n","print('Blue points are benign, red points are malignant.')"],"metadata":{"id":"iUelwWo2h3bV","executionInfo":{"status":"ok","timestamp":1692261099191,"user_tz":-600,"elapsed":51921,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/","height":439},"outputId":"6a0896f4-4eb4-4e04-8257-cdd7e08620bb"},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Blue points are benign, red points are malignant.\n"]}]},{"cell_type":"markdown","source":["In the above codes, we use the default metric (minkowski) to generate classifier. Next, we will try other metrics and see the classification results."],"metadata":{"id":"TEorPQxJ0gzA"}},{"cell_type":"code","source":["# use the cosine metric.\n","knn_classifier = KNeighborsClassifier(n_neighbors=5, metric='cosine')\n","\n","# train\n","knn_classifier.fit(X_train, y_train)\n","\n","y_train_pred = knn_classifier.predict(X_train)\n","y_test_pred = knn_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","from sklearn.metrics import accuracy_score\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred):.4f}\")"],"metadata":{"id":"VjVGcDkU2vSl","executionInfo":{"status":"ok","timestamp":1692261099192,"user_tz":-600,"elapsed":37,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ffb700bd-d3cf-49b5-cb30-2d21c1be49c3"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9414\n","acc of test dataï¼š0.9649\n"]}]},{"cell_type":"markdown","source":["Compare with the results with `minkowski` metric, `cosine` works much better"],"metadata":{"id":"H8d-YJsz-_41"}},{"cell_type":"markdown","source":["Besides, we change the number of neighbors and test the performance."],"metadata":{"id":"3b0TmBAi3SEe"}},{"cell_type":"code","source":["# use 10 for the number of neighbors\n","knn_classifier = KNeighborsClassifier(n_neighbors=10, metric='minkowski')\n","\n","# train\n","knn_classifier.fit(X_train, y_train)\n","\n","y_train_pred = knn_classifier.predict(X_train)\n","y_test_pred = knn_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","from sklearn.metrics import accuracy_score\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred):.4f}\")"],"metadata":{"id":"kCWSZ6p73CFO","executionInfo":{"status":"ok","timestamp":1692261099192,"user_tz":-600,"elapsed":33,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b2a15ed1-53b6-4b3b-894d-1bbf23704b35"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9395\n","acc of test dataï¼š0.9298\n"]}]},{"cell_type":"code","source":["# use 2 for the number of neighbors\n","knn_classifier = KNeighborsClassifier(n_neighbors=2, metric='minkowski')\n","\n","# train\n","knn_classifier.fit(X_train, y_train)\n","\n","y_train_pred = knn_classifier.predict(X_train)\n","y_test_pred = knn_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","from sklearn.metrics import accuracy_score\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred):.4f}\")"],"metadata":{"id":"4tTRnuSc4Dbc","executionInfo":{"status":"ok","timestamp":1692261099193,"user_tz":-600,"elapsed":27,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cf8ac519-9571-465d-dfc7-a34a362c2613"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9492\n","acc of test dataï¼š0.9123\n"]}]},{"cell_type":"code","source":["# use 10 for the number of neighbors and the cosine metric\n","knn_classifier = KNeighborsClassifier(n_neighbors=10, metric='cosine')\n","\n","# train\n","knn_classifier.fit(X_train, y_train)\n","\n","y_train_pred = knn_classifier.predict(X_train)\n","y_test_pred = knn_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","from sklearn.metrics import accuracy_score\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred):.4f}\")"],"metadata":{"id":"Nr8MYrow4KZb","executionInfo":{"status":"ok","timestamp":1692261099193,"user_tz":-600,"elapsed":22,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a134a2a9-3b1d-4e0c-ccc5-ce0ac4505d8c"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9336\n","acc of test dataï¼š0.9298\n"]}]},{"cell_type":"code","source":["# use 2 for the number of neighbors and the cosine metric\n","knn_classifier = KNeighborsClassifier(n_neighbors=2, metric='cosine')\n","\n","# train\n","knn_classifier.fit(X_train, y_train)\n","\n","y_train_pred = knn_classifier.predict(X_train)\n","y_test_pred = knn_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","from sklearn.metrics import accuracy_score\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred):.4f}\")"],"metadata":{"id":"zvzybMOB4Kmj","executionInfo":{"status":"ok","timestamp":1692261099193,"user_tz":-600,"elapsed":18,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1eb4bb7e-45f9-45c7-b9ad-3e0cc6cba6ab"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9453\n","acc of test dataï¼š0.8947\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"lLTln54O_g2R"}},{"cell_type":"markdown","source":["Summary: Results differ a lot with different hyperparameter. In practice, we need to tune the model with different hyperparameters to achieve better performance.\n","\n","Metric: **minkowski** (Number of neighbors)\n","\n","Train acc: 0.9492(2) 0.9453(5) 0.9395(10)\n","\n","Test acc:   0.9123(2) 0.9298(5) 0.9298(10)\n","\n","Metric: **cosine** (Number of neighbors)\n","\n","Train acc: 0.9453(2) 0.9414(5) 0.9336(10)\n","\n","Test acc:   0.8947(2) 0.9649(5) 0.9298(10)\n","\n","\n","\n"],"metadata":{"id":"itJv_Mul4Tmk"}},{"cell_type":"markdown","source":["## SVM"],"metadata":{"id":"aTqO7iZTrc9u"}},{"cell_type":"markdown","source":["Now, we use SVM as our diagnosis predictor for the Breast Cancer Wisconsin (Diagnostic) Data Set."],"metadata":{"id":"zjDDB_CPrgmP"}},{"cell_type":"code","source":["from sklearn import svm\n","svm_classifier = svm.SVC()\n","\n"," # train\n","svm_classifier.fit(X_train, y_train)\n","\n","\n","# predict\n","y_train_pred_svm = svm_classifier.predict(X_train)\n","y_test_pred_svm = svm_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred_svm):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred_svm):.4f}\")"],"metadata":{"id":"DvyRAasHr7NW","executionInfo":{"status":"ok","timestamp":1692261099193,"user_tz":-600,"elapsed":14,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"af9b2e5d-b3aa-44b3-f2fa-51702ea3c830"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9160\n","acc of test dataï¼š0.9474\n"]}]},{"cell_type":"markdown","source":["## Perceptron"],"metadata":{"id":"8u7szI6-sv5n"}},{"cell_type":"markdown","source":["Similarly, we use single-layer ANN (perceptron) as our predictor."],"metadata":{"id":"2oA08JKBttDH"}},{"cell_type":"code","source":["from sklearn.linear_model import Perceptron\n","perceptron_classifier = Perceptron(tol=1e-3, random_state=0)\n","\n","perceptron_classifier.fit(X,y)\n","\n","# predict\n","y_train_pred_perceptron = perceptron_classifier.predict(X_train)\n","y_test_pred_perceptron = perceptron_classifier.predict(X_test)\n","\n","\n","# calculate the accuracy of the train and test data.\n","print(f\"acc of train dataï¼š{accuracy_score(y_train, y_train_pred_perceptron):.4f}\")\n","print(f\"acc of test dataï¼š{accuracy_score(y_test, y_test_pred_perceptron):.4f}\")"],"metadata":{"id":"R8oBUzngs1iu","executionInfo":{"status":"ok","timestamp":1692261099193,"user_tz":-600,"elapsed":10,"user":{"displayName":"Dylan","userId":"11860375853639011437"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c64a37b4-bb96-41d5-b452-82e2dda79942"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["acc of train dataï¼š0.9277\n","acc of test dataï¼š0.9123\n"]}]},{"cell_type":"markdown","source":["**Question 3: Can you realize the multi-layer ANN classifier (like 3-layer)?**\n","\n","**Question 4: For the mentioned classifiers, please make a summary of them and find a best classifier for the breast cancer diagnosis dataset.**"],"metadata":{"id":"TzL59RMRuXN-"}},{"cell_type":"code","source":[],"metadata":{"id":"-f1ZyFd7nagj"},"execution_count":null,"outputs":[]}]}